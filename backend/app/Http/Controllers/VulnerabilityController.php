<?php

namespace App\Http\Controllers;

use App\Http\Requests\StoreVulnerability;
use App\Http\Requests\UpdateVulnerability;
use App\Models\ProductVersion;
use App\Models\Vulnerability;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class VulnerabilityController extends Controller
{

    public function __construct()
    {
        $this->authorizeResource(Vulnerability::class, 'vulnerability');
        $this->middleware('auth')->only('create');
        $this->middleware('verified')->only('create');
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $keyword = $request->input('keyword', '');

        $query = Vulnerability::orderBy('cve_id', 'asc')->paginate(5);

        if ($keyword) {
            $query = Vulnerability::where('cve_id', 'LIKE', "%{$keyword}%")
                            ->orWhere('cwe', 'LIKE', "%{$keyword}%")
                            ->orWhere('overview', 'LIKE', "%{$keyword}%")
                            ->orderBy('cve_id', 'asc')
                            ->paginate(5);
        }

        $vulnerabilities = $query;

        return view('vulnerability/index', compact('vulnerabilities', 'keyword'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $product_versions = ProductVersion::all();

        return view('vulnerability/create', compact('product_versions'));
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(StoreVulnerability $request)
    {
        $validated = $request->validated();
        $vulnerability = new Vulnerability;

        $vulnerability->fill($validated);
        $vulnerability->user_id = Auth::id();
        $vulnerability->save();
        
        $vulnerability->affected_product()
        ->attach($request->product_version, ['user_id' => Auth::id(), 'created_at' => now(), 'updated_at' => now()]);

        return redirect('vulnerability');
    }

    /**
     * Display the specified resource.
     *
     * @param  \App\Models\Vulnerability  $vulnerability
     * @return \Illuminate\Http\Response
     */
    public function show(Vulnerability $vulnerability)
    {
        $affected_products = $vulnerability->affected_product;
        $product_versions = [];

        if (!empty($affected_products)) {
            foreach ($affected_products as $affected_product) {
                $product = ProductVersion::find($affected_product->id)->product->name;
                $version = ProductVersion::find($affected_product->id)->version->version;
                $product_versions[$affected_product->id] = $product.'/'.$version;
            }
            asort($product_versions);
        }

        $comments = $vulnerability->comment;

        return view('vulnerability/show', compact('vulnerability', 'product_versions', 'comments'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \App\Models\Vulnerability  $vulnerability
     * @return \Illuminate\Http\Response
     */
    public function edit(Vulnerability $vulnerability)
    {
        $product_versions = ProductVersion::all();
        return view('vulnerability/edit', ['vulnerability' => $vulnerability, 'product_versions' => $product_versions]);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \App\Models\Vulnerability  $vulnerability
     * @return \Illuminate\Http\Response
     */
    public function update(UpdateVulnerability $request, Vulnerability $vulnerability)
    {
        $vulnerability->fill($request->all())->save();

        $affected_products = [];
        $affected_product_keys = request()->product_version;
        $affected_product_value = ['user_id' => Auth::id(), 'created_at' => now(), 'updated_at' => now()];

        if (!empty($affected_product_keys)) {
            foreach ($affected_product_keys as $key) {
                $affected_products[$key] = $affected_product_value;
            }
        }

        $vulnerability->affected_product()
        ->sync($affected_products);

        return redirect('vulnerability');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Models\Vulnerability  $vulnerability
     * @return \Illuminate\Http\Response
     */
    public function destroy(Vulnerability $vulnerability)
    {
        $vulnerability->affected_product()->detach();
        $vulnerability->delete();

        return redirect('vulnerability');
    }
}
