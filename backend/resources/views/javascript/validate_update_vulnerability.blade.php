<script>
    window.addEventListener('load', function() {

        // CVE IDのバリデーション
        const validateCveId = (cveId) => {
            const re = /^CVE-[0-9]{4}-[0-9]{4,5}$/;
            return re.test(cveId);
        }

        const cveId = document.getElementById("defaultUpdateFormCveId");
        const cveIdHelper = document.getElementById("defaultUpdateFormCveIdHelpBlock");

        cveId.addEventListener("change", function() {
            if (validateCveId(this.value)) {
                cveIdHelper.remove();
                this.setAttribute("class", "form-control is-valid");
                checkStatus();
            } else {
                cveIdHelper.remove();
                this.setAttribute("class", "form-control is-invalid");
                checkStatus();
            }
        })

        // NVD URLのバリデーション
        const validateNvdUrl = (nvdUrl) => {
            const re = /^https:\/\/nvd.nist.gov\/vuln\/detail\/CVE-[0-9]{4}-[0-9]{4,5}$/;
            return re.test(nvdUrl);
        }

        const nvdUrl = document.getElementById("defaultUpdateFormNvdUrl");
        const nvdUrlHelper = document.getElementById("defaultUpdateFormNvdUrlHelpBlock");

        nvdUrl.addEventListener("change", function() {
            if (validateNvdUrl(this.value)) {
                nvdUrlHelper.remove();
                this.setAttribute("class", "form-control is-valid");
                checkStatus();
            } else {
                nvdUrlHelper.remove();
                this.setAttribute("class", "form-control is-invalid");
                checkStatus();
            }
        })

        // 攻撃元区分のバリデーション
        const accessVector = document.getElementById("defaultUpdateFormAccessVector");
        const accessVectorHelper = document.getElementById("defaultUpdateFormAccessVectorHelpBlock");

        accessVector.addEventListener("change", function() {
            if (this.value === "Network" || this.value === "Adjacent" || this.value ===
                "Local" || this.value === "Physical") {
                accessVectorHelper.remove();
                this.setAttribute("class", "form-control is-valid");
                checkStatus();
            } else {
                accessVectorHelper.remove();
                this.setAttribute("class", "form-control is-invalid");
                checkStatus();
            }
        })

        // 攻撃条件の複雑さバリデーション
        const accessComplexity = document.getElementById("defaultUpdateFormAccessComplexity");
        const accessComplexityHelper = document.getElementById("defaultUpdateFormAccessComplexityHelpBlock");

        accessComplexity.addEventListener("change", function() {
            if (this.value === "Low" || this.value === "High") {
                accessComplexityHelper.remove();
                this.setAttribute("class", "form-control is-valid");
                checkStatus();
            } else {
                accessComplexityHelper.remove();
                this.setAttribute("class", "form-control is-invalid");
                checkStatus();
            }
        })

        // 必要な特権レベルのバリデーション
        const privilegesRequired = document.getElementById("defaultUpdateFormPrivilegesRequired");
        const privilegesRequiredHelper = document.getElementById("defaultUpdateFormPrivilegesRequiredHelpBlock");

        privilegesRequired.addEventListener("change", function() {
            if (this.value === "None" || this.value === "Low" || this.value === "High") {
                privilegesRequiredHelper.remove();
                this.setAttribute("class", "form-control is-valid");
                checkStatus();
            } else {
                privilegesRequiredHelper.remove();
                this.setAttribute("class", "form-control is-invalid");
                checkStatus();
            }
        })

        // ユーザー関与レベルのバリデーション
        const userInteraction = document.getElementById("defaultUpdateFormUserInteraction");
        const userInteractionHelper = document.getElementById("defaultUpdateFormUserInteractionHelpBlock");

        userInteraction.addEventListener("change", function() {
            if (this.value === "None" || this.value === "Required") {
                userInteractionHelper.remove();
                this.setAttribute("class", "form-control is-valid");
                checkStatus();
            } else {
                userInteractionHelper.remove();
                this.setAttribute("class", "form-control is-invalid");
                checkStatus();
            }
        })

        // 影響の想定範囲のバリデーション
        const scope = document.getElementById("defaultUpdateFormScope");
        const scopeHelper = document.getElementById("defaultUpdateFormScopeHelpBlock");

        scope.addEventListener("change", function() {
            if (this.value === "Unchanged" || this.value === "Changed") {
                scopeHelper.remove();
                this.setAttribute("class", "form-control is-valid");
                checkStatus();
            } else {
                scopeHelper.remove();
                this.setAttribute("class", "form-control is-invalid");
                checkStatus();
            }
        })

        // 機密性への影響のバリデーション
        const confidentialityImpact = document.getElementById("defaultUpdateFormConfidentialityImpact");
        const confidentialityImpactHelper = document.getElementById(
            "defaultUpdateFormConfidentialityImpactHelpBlock");

        confidentialityImpact.addEventListener("change", function() {
            if (this.value === "None" || this.value === "Low" || this.value === "High") {
                confidentialityImpactHelper.remove();
                this.setAttribute("class", "form-control is-valid");
                checkStatus();
            } else {
                confidentialityImpactHelper.remove();
                this.setAttribute("class", "form-control is-invalid");
                checkStatus();
            }
        })

        // 完全性への影響のバリデーション
        const integrityImpact = document.getElementById("defaultUpdateFormIntegrityImpact");
        const integrityImpactHelper = document.getElementById("defaultUpdateFormIntegrityImpactHelpBlock");

        integrityImpact.addEventListener("change", function() {
            if (this.value === "None" || this.value === "Low" || this.value === "High") {
                integrityImpactHelper.remove();
                this.setAttribute("class", "form-control is-valid");
                checkStatus();
            } else {
                integrityImpactHelper.remove();
                this.setAttribute("class", "form-control is-invalid");
                checkStatus();
            }
        })

        // 可用性への影響のバリデーション
        const availabilityImpact = document.getElementById("defaultUpdateFormAvailabilityImpact");
        const availabilityImpactHelper = document.getElementById("defaultUpdateFormAvailabilityImpactHelpBlock");

        availabilityImpact.addEventListener("change", function() {
            if (this.value === "None" || this.value === "Low" || this.value === "High") {
                availabilityImpactHelper.remove();
                this.setAttribute("class", "form-control is-valid");
                checkStatus();
            } else {
                availabilityImpactHelper.remove();
                this.setAttribute("class", "form-control is-invalid");
                checkStatus();
            }
        })

        // Base Scoreのバリデーション
        const baseScore = document.getElementById("defaultUpdateFormBaseScore");
        const baseScoreHelper = document.getElementById("defaultUpdateFormBaseScoreHelpBlock");

        baseScore.addEventListener("change", function() {
            if (0.0 <= this.value && this.value <= 10.0) {
                baseScoreHelper.remove();
                this.setAttribute("class", "form-control is-valid");
                checkStatus();
            } else {
                baseScoreHelper.remove();
                this.setAttribute("class", "form-control is-invalid");
                checkStatus();
            }
        })

        // CWEのバリデーション
        const cwe = document.getElementById("defaultUpdateFormCwe");
        const cweHelper = document.getElementById("defaultUpdateFormCweHelpBlock");

        cwe.addEventListener("change", function() {
            if (this.value.length <= 100) {
                cweHelper.remove();
                this.setAttribute("class", "form-control is-valid");
                checkStatus();
            } else {
                cweHelper.remove();
                this.setAttribute("class", "form-control is-invalid");
                checkStatus();
            }
        })

        // 概要のバリデーション
        const overview = document.getElementById("defaultUpdateFormOverview");
        const overviewHelper = document.getElementById("defaultUpdateFormOverviewHelpBlock");

        overview.addEventListener("change", function() {
            if (this.value) {
                overviewHelper.remove();
                this.setAttribute("class", "form-control is-valid");
                checkStatus();
            } else {
                overviewHelper.remove();
                this.setAttribute("class", "form-control is-invalid");
                checkStatus();
            }
        })

        // 解決法のバリデーション
        const solution = document.getElementById("defaultUpdateFormSolution");
        const solutionHelper = document.getElementById("defaultUpdateFormSolutionHelpBlock");

        solution.addEventListener("change", function() {
            if (this.value) {
                solutionHelper.remove();
                this.setAttribute("class", "form-control is-valid");
                checkStatus();
            } else {
                solutionHelper.remove();
                this.setAttribute("class", "form-control is-invalid");
                checkStatus();
            }
        })

        // ベンダー情報のバリデーション
        const vendorInformation = document.getElementById("defaultUpdateFormVendorInformation");
        const vendorInformationHelper = document.getElementById("defaultUpdateFormVendorInformationHelpBlock");

        vendorInformation.addEventListener("change", function() {
            if (this.value) {
                vendorInformationHelper.remove();
                this.setAttribute("class", "form-control is-valid");
                checkStatus();
            } else {
                vendorInformationHelper.remove();
                this.setAttribute("class", "form-control is-invalid");
                checkStatus();
            }
        })

        // 入力値チェック後ボタン無効化
        const updateButton = document.getElementById("defaultUpdateButton");

        // フォームチェックNGの個数
        const inValidStatuses = document.getElementsByClassName('is-invalid');

        const checkStatus = () => {
            if (inValidStatuses.length >= 1) {
                updateButton.setAttribute("disabled", true);
            } else {
                updateButton.removeAttribute("disabled");
            }
        }
    })

</script>
